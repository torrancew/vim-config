set nocompatible
filetype off

"""""""""""""""""""
""" Load Vundle """
"""""""""""""""""""
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim

""""""""""""""""""""""
""" Vundle Bundles """
""""""""""""""""""""""
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
Bundle 'vim-scripts/L9'
Bundle 'scrooloose/nerdtree'
Bundle 'puppetlabs/puppet-syntax-vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-haml'
Bundle 'vim-ruby/vim-ruby'
Bundle 'groenewege/vim-less'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'DawidJanczak/vim-coffee-script'
Bundle 'mileszs/ack.vim'
Bundle 'sickill/vim-pasta'
Bundle 'rkitover/perl-vim-mxd'
Bundle 'c9s/perlomni.vim'
Bundle 'spf13/vim-colors'
Bundle 'torrancew/vim-openscad'
Bundle 'scrooloose/syntastic'
Bundle 'Lokaltog/powerline'
Bundle 'kien/ctrlp.vim'
Bundle 'godlygeek/tabular'
Bundle 'Lokaltog/vim-distinguished'
Bundle 'vim-scripts/RubySinatra'
Bundle 'guns/vim-clojure-static'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'tpope/vim-fireplace'
Bundle 'tpope/vim-classpath'
Bundle 'jnwhiteh/vim-golang'
Bundle 'Blackrush/vim-gocode'
Bundle 'ervandew/supertab'
Bundle 'saltstack/salt-vim'

""""""""""""""""
""" GUI Font """
""""""""""""""""
set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 10

""""""""""""""""""""""""
""" General Settings """
""""""""""""""""""""""""
if has('gui_running')
  colorscheme distinguished
else
  colorscheme slate
endif

syntax on

filetype plugin indent on
set ts=2 sts=2 sw=2 noai nu et si

"""""""""""""""""""
""" Status Line """
"""""""""""""""""""
set laststatus=2
let g:Powerline_symbols='fancy'
" Deprecated by powerline; active if powerline is removed
set statusline=%t\ 
set statusline+=%#warningmsg#\ 
set statusline+=%{SyntasticStatuslineFlag()}\ 
set statusline+=%*\ 
set statusline+=%{fugitive#statusline()}\ 
set statusline+=[%{strlen(&fenc)?&fenc:'none'},%{&ff}]\ 
set statusline+=%h%m%r%y%=%c,%l/%L\ 
set statusline+=%P\ 

""""""""""""""""""""""
""" Syntax Folding """
""""""""""""""""""""""
let perl_fold = 1

""""""""""""""""""""""""
""" Custom Functions """
""""""""""""""""""""""""

" Set filetype-specific snippet mappings
command! -nargs=* SetSnippets call SetSnippets()
function! SetSnippets()
  if &filetype == "go"
    let b:snip_func    = "ofunc () {<CR>}<CR><ESC>?func<CR>ela"
    let b:snip_class   = "otype  {<CR>}<CR><ESC>?type<CR>ela"
    let b:use_snippets = 1
  elseif &filetype == "ruby"
    let b:snip_func    = "odef ()<CR><ESC>dd?def<CR>ela"
    let b:snip_class   = "oclass <CR><ESC>dd?class<CR>ela"
    let b:use_snippets = 1
  else
    let b:use_snippets = 0
    if exists("b:snip_mod")
      unlet b:snip_mod
    endif
    if exists("b:snip_func")
      unlet b:snip_func
    endif
    if exists("b:snip_class")
      unlet b:snip_class
    endif
  endif

  if b:use_snippets
    if exists("b:snip_mod")
      exe "noremap <buffer> " . "<leader>mod " . b:snip_mod
    endif
    if exists("b:snip_func")
      exe "noremap <buffer> " . "<leader>func " . b:snip_func
    endif
    if exists("b:snip_class")
      exe "noremap <buffer> " . "<leader>class " . b:snip_class
    endif
  endif
endfunction

" Use Vim as a hex editor
" Courtesy of http://vim.wikia.com/wiki/Improved_Hex_editing
command! -nargs=* Hexmode call ToggleHex()
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" Normalize tabstop, softtabstop and shiftwidth to one value
command! -nargs=* SetTabs call SetTabs()
function! SetTabs()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

" Function for displaying current tab settings
command! -nargs=* SummarizeTabs call SummarizeTabs()
function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' et'
    else
      echon ' noet'
    endif
  finally
    echohl None
  endtry
endfunction

" Call a function and preserve cursor position
function! Preserve(command)
  " Preparation: save last search, cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Make the substitution
  execute a:command
  " Restore history and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"""""""""""""""""""
""" KeyBindings """
"""""""""""""""""""
let mapleader=','

" Modify and Reload Keybindings
nmap <leader>k :!gvim -f ~/.vimrc<CR>:source ~/.vimrc<CR>

" Toggle Hex mode
nmap <leader>h :Hexmode<CR>

" Search with Ack
nmap <leader>a :Ack<CR>
nmap <leader>A :Ack 
vmap <leader>a :Ack<CR>
vmap <leader>A :Ack 

" Toggle Non-Printable Characters
nmap <leader>l :set list!<CR>

" Tab-Related Bindings
nmap <S-Tab> :SummarizeTabs<CR>
nmap <C-Tab> :retab!<CR>

" Strip Trailing Whitespace
nmap <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

" Copy/Cut/Paste
nmap <leader>y "+y
nmap <leader>x "+y
nmap <leader>p "+gp
nmap <leader>P "+gP

" NERDTree Bindings
nmap <leader>B :NERDTreeToggle<CR>

" ctags Bindings
nmap <leader>r :!ctags --exclude='*/tmp/*' --exclude='*/log/*' -R ./*<CR><CR>

" Syntastic Bindings
nmap <leader>s :SyntasticCheck<CR>
nmap <leader>S :SyntasticToggleMode<CR>

" SuperTab Settings
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

source ~/.vimrc.local

au VimEnter * RainbowParenthesesToggle
au Syntax   * RainbowParenthesesLoadRound
au Syntax   * RainbowParenthesesLoadSquare
au Syntax   * RainbowParenthesesLoadBraces

au BufEnter *.go     exe 'noremap <F5> :!go run %<CR>'
au BufEnter *.js     exe 'noremap <F5> :!npm run-script %<CR>'
au BufEnter *.pl     exe 'noremap <F5> :!perl %<CR>'
au BufEnter *.py     exe 'noremap <F5> :!python %<CR>'
au BufEnter *.rb     exe 'noremap <F5> :!ruby %<CR>'
au BufEnter *.mkd    exe 'noremap <F5> :!gh-markdown %<CR><CR>'
au BufEnter *.coffee exe 'noremap <F5> :!coffee %<CR><CR>'

" This is terrible and should die, but is a hacky, hacky snippet
au BufEnter * exe 'SetSnippets<CR>'

