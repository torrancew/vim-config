let g:powerline_no_python_error = 1

set nocompatible
filetype off

"""""""""""""""""""
""" Load Vundle """
"""""""""""""""""""
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

""""""""""""""""""""""
""" Vundle Bundles """
""""""""""""""""""""""

" Utilities
Plugin 'gmarik/Vundle.vim'
Plugin 'vim-scripts/L9'
Plugin 'junegunn/fzf.vim'
Plugin 'SirVer/ultisnips'
Plugin 'bling/vim-airline'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'sickill/vim-pasta'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'honza/vim-snippets'
Plugin 'bounceme/highwayman'
Plugin 'jremmen/vim-ripgrep'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'itchyny/calendar.vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'airblade/vim-gitgutter'
Plugin 'flazz/vim-colorschemes'
Plugin 'rhysd/vim-clang-format'
Plugin 'Valloric/YouCompleteMe'
Plugin 'kien/rainbow_parentheses.vim'

" Language Support
Plugin 'fatih/vim-go'
Plugin 'hylang/vim-hy'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-rails'
Plugin 'c9s/perlomni.vim'
Plugin 'tpope/vim-bundler'
Plugin 'vim-ruby/vim-ruby'
Plugin 'rust-lang/rust.vim'
Plugin 'saltstack/salt-vim'
Plugin 'solarnz/thrift.vim'
Plugin 'groenewege/vim-less'
Plugin 'tell-k/vim-autopep8'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-classpath'
Plugin 'Blackrush/vim-gocode'
Plugin 'rkitover/perl-vim-mxd'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'torrancew/vim-openscad'
Plugin 'wlangstroth/vim-haskell'
Plugin 'guns/vim-clojure-static'
Plugin 'vim-scripts/RubySinatra'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'vim-scripts/vim-terraform'
Plugin 'puppetlabs/puppet-syntax-vim'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'DawidJanczak/vim-coffee-script'

call vundle#end()

set rtp+=~/.fzf

""""""""""""""""
""" GUI Font """
""""""""""""""""
set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 10

""""""""""""""""""""""""
""" General Settings """
""""""""""""""""""""""""
set background=dark
colorscheme solarized

syntax on

filetype plugin indent on
set ts=2 sts=2 sw=2 noai nu et si

"""""""""""""""""""
""" Status Line """
"""""""""""""""""""
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

""""""""""""""""""""""""""""""
""" Miscellaneous Settings """
""""""""""""""""""""""""""""""
set wildignore+=*.swp,*.swo,*/.git/*,*/tmp/*,*/log/*

""""""""""""""""""""""""
""" Custom Functions """
""""""""""""""""""""""""

" Use Vim as a hex editor
" Courtesy of http://vim.wikia.com/wiki/Improved_Hex_editing
command! -nargs=* Hexmode call ToggleHex()
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" Normalize tabstop, softtabstop and shiftwidth to one value
command! -nargs=* SetTabs call SetTabs()
function! SetTabs()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

" Function for displaying current tab settings
command! -nargs=* SummarizeTabs call SummarizeTabs()
function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' et'
    else
      echon ' noet'
    endif
  finally
    echohl None
  endtry
endfunction

" Call a function and preserve cursor position
function! Preserve(command)
  " Preparation: save last search, cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Make the substitution
  execute a:command
  " Restore history and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"""""""""""""""""""
""" KeyBindings """
"""""""""""""""""""
let mapleader=','

" Modify and Reload Keybindings
nmap <leader>k :!vim -f ~/.vimrc<CR>:source ~/.vimrc<CR>

" Toggle Hex mode
nmap <leader>h :Hexmode<CR>

" FuzzyFinder
nmap <C-p> :Files<CR>
nmap <leader>fb :Buffers<CR>
nmap <leader>fg :GFiles<CR>
nmap <leader>ff :Files<CR>
nmap <leader>fs :Snippets<CR>
nmap <leader>ft :Tags<CR>

" Search with RipGrep
nmap <leader>a :Rg<CR>
nmap <leader>A :Rg 
vmap <leader>a :Rg<CR>
vmap <leader>A :Rg

" Toggle Non-Printable Characters
nmap <leader>l :set list!<CR>

" Tab-Related Bindings
nmap <S-Tab> :SummarizeTabs<CR>
nmap <C-Tab> :retab!<CR>

" Strip Trailing Whitespace
nmap <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

" Copy/Cut/Paste
nmap <leader>y "+y
nmap <leader>x "+y
nmap <leader>p "+gp
nmap <leader>P "+gP

" NERDTree Bindings
nmap <leader>B :NERDTreeToggle<CR>

" ctags Bindings
nmap <leader>r :!ctags --exclude='*/tmp/*' --exclude='*/log/*' -R ./*<CR><CR>

" Syntastic Bindings
nmap <leader>s :SyntasticCheck<CR>
nmap <leader>S :SyntasticToggleMode<CR>

set guioptions = "acegitT"

" Tabularize Bindings
vmap t :Tabularize /

" Easytag Settings
set tags=./tags
let g:easytags_dynamic_files = 1

" Tagbar Bindings
nmap <leader>t :TagbarToggle<CR>

au VimEnter * RainbowParenthesesToggle
au Syntax   * RainbowParenthesesLoadRound
au Syntax   * RainbowParenthesesLoadSquare
au Syntax   * RainbowParenthesesLoadBraces

au BufWritePre *.py Autopep8

au FileType python setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr

au BufEnter *.go     exe 'noremap <F5> :!go run %<CR>'
au BufEnter *.pl     exe 'noremap <F5> :!perl %<CR>'
au BufEnter *.py     exe 'noremap <F5> :!python %<CR>'
au BufEnter *.rb     exe 'noremap <F5> :!ruby %<CR>'
au BufEnter *.mkd    exe 'noremap <F5> :Pandoc! html5<CR>'

let g:easytags_events = ['BufWritePost']

let g:clang_format#auto_format       = 1
let g:clang_format#detect_style_file = 1

" YouCompleteMe Configuration
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_python_binary_path = 'python'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_key_list_select_completion   = ['<C-n>', '<C-j>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<C-k>']
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" Autopep8 Configuration
let g:autopep8_aggressive = 1
let g:autopep8_disable_show_diff = 1

if executable('rg')
  set grepprg=rg\ --vimgrep
endif

if filereadable($HOME . "/.vimrc.local")
  source $HOME/.vimrc.local
endif

if filereadable(".vimrc.project")
  source .vimrc.project
endif

